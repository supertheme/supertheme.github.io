<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>supertheme</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://supertheme.github.io/"/>
  <updated>2020-02-14T14:48:49.343Z</updated>
  <id>https://supertheme.github.io/</id>
  
  <author>
    <name>supertheme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式</title>
    <link href="https://supertheme.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://supertheme.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-13T03:09:38.000Z</published>
    <updated>2020-02-14T14:48:49.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>最近在学习spring cloud的一些基础，在看到Feign组件的时候对其实现产生了浓厚的兴趣，在度娘的帮助下，发现其主要使用了代理模式对RestTemplate做了封装，在此，简单回顾一下java中的代理模式。<br>代理模式，顾名思义，就是在调用类和被调用类出现了一个代理类，生活中这种例子有很多，比如买车，买房等等，我们都不是直接去车企，开发商那直接买的，而是通过经销商呀，买房中介呀等渠道，这些角色扮演的就是<br>代理的角色。我们通过这些代理，可以获得一些额外的服务。这就是代理的好处了。<br>在软件中代理一般分为静态代理和动态代理，其中动态代理又有JDK自带的动态代理和cglib代理两种方式。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>让我们还是用卖车的例子看看静态代理的实现过程<br>先定义一个接口，代表着有卖车的服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line">    <span class="comment">//卖车</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来一个实现类，实际上这就是具体的车企了，毕竟只有它才有造车的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarSaleImpl</span> <span class="keyword">implements</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一辆车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，接下来是具体的买车了，想像一下实际场景，我们都是在经销商或者4s店那里买车的，他们承担的就是代理的角色。<br>代理的不单单只是做了卖车这个主要功能，关键是它还可以提供一些额外的附件服务呀，比如说4s店还可以提供配件，保修等功能，当然，也可以卖保险呀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarSale carSaleImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Benz</span><span class="params">(CarSale carSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carSaleImpl = carSale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一份保险"</span>);</span><br><span class="line">        <span class="keyword">this</span>.carSaleImpl.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述过程我们可以看到，代理的好处在于其在不修改目标类的基础之上，可以提供一些额外的附加功能，但是，静态代理的弊端也很显然易见，就是代理类需要与目标类实现相同的接口。<br>我们这里只是介绍了 一个代理商，实际上车企品牌五花八门的，如果他们都需要一个代理商，我们总不能在代码中写很多重复的代理类吧，这时候，动态代理就出现了。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理，与静态代理的最大区别就是其代理类是通过反射在程序运行时动态生成的。主要分为JDK动态代理和cglib动态代理两种实现。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>jdk动态代理的实现依赖于两个对象：Proxy 和 InvocationHandler<br>其中proxy的作用就是代理了目标对象，而invocationHandler的作用是实现了目标对象，具体实现过程为：<br>Proxy（jdk类库提供）根据目标对象的接口生成一个实现类，它就是动态代理类（该类型是 $Proxy+数字 ）。生成过程是：由于拿到了接口，便可以获知接口的所有信息（主要是方法的定义），也就能声明一个新的类型去实现该接口的所有方法，这些方法显然都是“虚”的，它调用另一个对象的方法。当然这个被调用的对象不能是目标对象，如果是目标对象，我们就没法增强了，等于饶了一圈又回来了。因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。最终生成的动态类实际上是继承自Proxy且实现了目标对象接口的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被代理的目标对象*/</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取动态代理对象*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖了一份保险"</span>);</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarSale carSale = <span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> CarSaleImpl()).getProxy();</span><br><span class="line">        carSale.sell();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理<br>jdk创建对象的速度远大于cglib，这是由于cglib创建对象时需要操作字节码。cglib执行速度略大于jdk，所以比较适合单例模式。另外由于CGLIB的大部分类是直接对Java字节码进行操作，这样生成的类会在Java的永久堆中。如果动态代理操作过多，容易造成永久堆满，触发OutOfMemory异常。spring默认使用jdk动态代理，如果类没有接口，则使用cglib</p><h2 id="代理的应用场景"><a href="#代理的应用场景" class="headerlink" title="代理的应用场景"></a>代理的应用场景</h2><ol><li>AOP</li><li>事务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是代理模式&quot;&gt;&lt;a href=&quot;#什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式&quot;&gt;&lt;/a&gt;什么是代理模式&lt;/h2&gt;&lt;p&gt;最近在学习spring cloud的一些基础，在看到Feign组件的时候对其实现产生了浓厚的兴趣，在
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://supertheme.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理" scheme="https://supertheme.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList</title>
    <link href="https://supertheme.github.io/Java_Collection_LinkedList/"/>
    <id>https://supertheme.github.io/Java_Collection_LinkedList/</id>
    <published>2020-01-10T13:00:01.148Z</published>
    <updated>2020-02-14T14:46:19.317Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>LinkedList简介</li><li>LinkedList源码分析</li><li>LinekdList常见操作总结</li></ul></blockquote><h2 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h2><hr><ol><li>LinkedList作为List的一个实现，与ArrayList采用数组作为数据存储不一样的是，其采用了链表Node作为底层的数据存储</li><li>LinkedList不单单实现了List接口，而且也实现了Deque接口，所以可以把其当做一个双向队列使用</li><li>LinkedList允许存放Null值</li><li>LinkedList由于采用了链表作为数据存储,所以最显著的特性在于插入快，但查询慢，这一点恰恰与ArrayList相反</li></ol><h2 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h2><hr><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>LinkedList内部持有Node来作为存储容器，我们可以看到Node的源码本身就是个双向链表的实现，在每个Node中，存放了当前节点的值，以及前一个节点prev以及后一个节点next<br><img src="../images/linkedlist_3.png" alt="LinkedList中的Node"><br>在LinkedList内部的成员变量中，则只存放了first node 和 last node<br><img src="../images/linkedlist_1.png" alt="LinkedList成员变量"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>LinkedList为我们提供了2种构造方法，分别是：</p><ol><li>无参构造方法</li><li>使用特定集合的构造方法</li></ol><p>第一种为LinkedList初始化，其中不含任何node，第二种直接使用Collection中的元素填充到LinkedList<br><img src="../images/linkedlist_2.png" alt="LinkedList构造方法"></p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>LinkedList由于实现了Deque操作，因此其含有众多的队列操作方法，在此我们简单的看一下其add remove方法是如何实现的。<br>add方法:<br><img src="../images/linkedlist_4.png" alt="linkedlist add"><br>remove方法:<br>remove方法只会移除第一个相等的元素哟！<br><img src="../images/linkedlist_5.png" alt="linkedlist remove"></p><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><p>linkedlist提供了基础的队列操作，总结如下:</p><p></p><p><br>    <div style="width:100%;border:none;text-align:center"><br>        <iframe allowtransparency="yes" frameborder="0" style="width:100%;height:100%" src="../attachments/linkedlist.table1.html"><br>    </iframe></div><br></p><p></p><p></p><p><br>    <div style="width:100%;border:none;text-align:center"><br>        <iframe allowtransparency="yes" frameborder="0" style="width:100%;height:100%" src="../attachments/linkedlist.table2.html"><br>    </iframe></div><br></p><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>LinkedList的底层实现是链表</li><li>LinkedList是非线程安全的</li><li>LinkedList遵循 fail-fast 机制，在执行add remove 等结构性修改的操作时，会抛出异常，若要在遍历过程中添加或修改元素，可以使用迭代器</li><li>LinkedList实现了Deque接口，所以我们可以把其当做一个双向队列的数据接口来使用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList简介&lt;/li&gt;
&lt;li&gt;LinkedList源码分析&lt;/li&gt;
&lt;li&gt;LinekdList常见操作总结&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;LinkedList简介&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="collection" scheme="https://supertheme.github.io/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>var 的奇怪作用域</title>
    <link href="https://supertheme.github.io/%E6%96%B0%E6%96%87%E6%A1%A3/"/>
    <id>https://supertheme.github.io/%E6%96%B0%E6%96%87%E6%A1%A3/</id>
    <published>2019-03-11T14:42:08.843Z</published>
    <updated>2020-02-14T14:49:29.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="var-的奇怪作用域"><a href="#var-的奇怪作用域" class="headerlink" title="var 的奇怪作用域"></a>var 的奇怪作用域</h3><p>function f(shouldInitialize: boolean) {<br>if (shouldInitialize) {<br>var x = 10;<br>}</p><p>return x;<br>}</p><p>f(true);  // returns ‘10’<br>f(false); // returns ‘undefined’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;var-的奇怪作用域&quot;&gt;&lt;a href=&quot;#var-的奇怪作用域&quot; class=&quot;headerlink&quot; title=&quot;var 的奇怪作用域&quot;&gt;&lt;/a&gt;var 的奇怪作用域&lt;/h3&gt;&lt;p&gt;function f(shouldInitialize: boolean) 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://supertheme.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://supertheme.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Springboot</title>
    <link href="https://supertheme.github.io/springboot/"/>
    <id>https://supertheme.github.io/springboot/</id>
    <published>2018-12-30T11:44:05.571Z</published>
    <updated>2020-02-14T14:48:01.127Z</updated>
    
    <content type="html"><![CDATA[<p>##springboot的目标</p><ol><li>为所有Spring开发者提供一个更快且更广泛的入门体验</li><li>开箱即用且能快速应对需求的变化(开闭原则)</li><li>提供一系列与原先大型项目等价的基础服务(嵌入式中间件,security health check)</li><li>消除XML配置<br>##环境搭建</li></ol><ul><li>Springboot 2.1.1.RELEASE</li><li>JAVA 8</li><li>Spring Framework 5.1.3.RELEASE</li><li>Maven 3.3+</li><li>Tomcat 9.0</li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ol><li>因为spring默认el表达式的占位符是${..}风格的，所有如果要使用Maven filtering,请使用@..@的格式，或者在maven propert中重新定义resource.delimiter</li></ol><h3 id="Externalized-Configuration"><a href="#Externalized-Configuration" class="headerlink" title="Externalized Configuration"></a>Externalized Configuration</h3><ul><li>配置随机值</li></ul><ol><li><strong>RandomValuePropertySource</strong> 可以使用${random.value}等表达式配置随机值</li></ol><ul><li>获取命令行参数值</li></ul><ol><li>SpringApplication将命令行参数(以–开头)转化为Property，并且可以通过<strong>Environment</strong>访问到,如果不希望Environment访问到，可以配置如下：SpringApplication.setAddCommandLineProperties(false)</li></ol><ul><li>配置文件</li></ul><p>1. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##springboot的目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为所有Spring开发者提供一个更快且更广泛的入门体验&lt;/li&gt;
&lt;li&gt;开箱即用且能快速应对需求的变化(开闭原则)&lt;/li&gt;
&lt;li&gt;提供一系列与原先大型项目等价的基础服务(嵌入式中间件,security heal
      
    
    </summary>
    
    
      <category term="spring" scheme="https://supertheme.github.io/categories/spring/"/>
    
    
      <category term="springboot" scheme="https://supertheme.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList</title>
    <link href="https://supertheme.github.io/Java_Collection_ArrayList/"/>
    <id>https://supertheme.github.io/Java_Collection_ArrayList/</id>
    <published>2018-12-16T10:41:27.250Z</published>
    <updated>2020-02-14T14:45:58.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>ArrayList简介</li><li>ArrayList源码分析</li><li>ArrayList扩容机制</li></ul></blockquote><h2 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h2><hr><ol><li>ArrayList可以理解成一个”动态数组”，由于Java中数组都是固定大小的，但ArrayList是一个可以动态的添加和删除元素的List,其底层仍然是由数组实现的。ArrayList继承自AbstractList，并且实现了List,RandomAccess,Cloneable,Serializable这四个接口。</li><li>ArrayList与Vector有很大的相似性，最大的区别在于ArrayList是线程不安全的，而Vector是线程安全的，若要使用线程安全的，请使用<code>List list = Collections.synchronizedList(new ArrayList(...));</code></li><li>ArrayList与LinkedList同样也有很大的相似性，二者作为List的主要两个实现类，主要区别在于ArrayList的add/remove操作慢，而get操作快，而LinkedList则恰好相反，究其原因还是在于底层实现一个是数组，一个是链表<h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2></li></ol><hr><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>ArrayList内部持有Object[]来作为存储容器，其默认的CAPACITY大小为10，最大的容量为Integer.MAX_VALUE<br><img src="../images/arraylist_1.png" alt="ArrayList的成员变量"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>ArrayList为我们提供了3种构造方法，分别是：</p><ol><li>指定初始容量的构造方法</li><li>无参构造方法</li><li>使用特定集合的构造方法</li></ol><p>第一种为elementData初始化成对应的指定容量大小，第二种直接构造一个空的elementData，第三种则是通过<code>Arrays.copyof</code>来初始话elementData并赋值<br><img src="../images/arraylist_2.png" alt="ArrayList构造方法"></p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>由于ArrayList本身的底层实现是数组，所以对于其操作的add remove get  set 等方法全部都是基于数据元素的操作，从源码截取了几个方法，本身逻辑均不复杂<br><img src="../images/arraylist_3.png" alt="ArrayList中的add、set"></p><p>remove方法:<br><img src="../images/arraylist_4.png" alt="ArrayList中的remove"></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>ArrayList还内置了三个内部类来帮助我们完成一些其他的操作，其中包含实现了Iterator接口的Itr，实现了ListIterator接口的ListItr，还有一个SubList</p><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p>由于Itr和ListItr只是实现的接口略有差异，在此截取了Itr执行remove的代码片段，我们可以看到，在Itr内部中含有一个新的expectedModCount变量，其初始值为modCount，<br>在执行remove操作的时候，会先进行判断expectedModCount与modCount是否相等，若相等，则执行remove操作，若不相等，则会抛出ConcurrentModificationException异常，相信小伙伴们对这个异常并不陌生，<br>平时在代码中对List写foreach循环的时候，若执行了remove操作，则就会遇见该异常了，而如果使用Iterator去执行remove操作，就可以正常删除了。原因就在于此哈。<br><img src="../images/arraylist_5.png" alt="ArrayList中的Iterator"></p><h4 id="SubList"><a href="#SubList" class="headerlink" title="SubList"></a>SubList</h4><p>ArrayList提供了SubList的内部类，其主要作用是提供对于List子集合的一个视图，我们需要注意的是，这仅仅是一个视图（与数据库里的概念类似）,任何对原List的操作均会体现在SubList上，而任何在SubList上的操作也会同样<br>的反应到List上，因为其本质上都是对同一个elementData做操作，因此，我们在进行add、remove等structurally modified的操作时，一定要特别注意subList也会进行相应的变化<br><img src="../images/arraylist_6.png" alt="ArrayList中的SubList"></p><h2 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h2><hr><p>为了充分的利用内存空间，代码规范也会让我们在初始化ArrayList就为其指定capacity，因此，我们有必要也了解一下ArrayList中的扩容机制，在执行add，addAll等操作时，会进行capacity的check，与当前elementData的size进行对比，<br>若需要扩容，则会<code>newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>，新容量将会是旧容量的1.5倍<br><img src="../images/arraylist_7.png" alt="ArrayList中的扩容"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>ArrayList的底层实现是数组</li><li>ArrayList是非线程安全的</li><li>ArrayList最好在初始化时就为其指定容量大小，每次在做add操作时，会触发容量检查，若当前数组小于元素个数时，会新申请1.5倍的数组空间，将原有数组复制</li><li>ArrayList遵循 fail-fast 机制，在执行add remove 等结构性修改的操作时，会抛出异常，若要在遍历过程中添加或修改元素，可以使用迭代器</li><li>ArrayList提供的subList方法实际上是返回的是其一个内部类，底层仍然指向同一片数组空间，只是作为视图使用，无论对List本身操作或者对SubList操作，二者相互之间均彼此影响</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList简介&lt;/li&gt;
&lt;li&gt;ArrayList源码分析&lt;/li&gt;
&lt;li&gt;ArrayList扩容机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ArrayList简介&quot;&gt;&lt;a href=&quot;#Arra
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="collection" scheme="https://supertheme.github.io/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="https://supertheme.github.io/Java_ThreadLocal/"/>
    <id>https://supertheme.github.io/Java_ThreadLocal/</id>
    <published>2018-12-01T13:01:18.695Z</published>
    <updated>2020-02-14T14:47:33.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><hr><ol><li>ThreadLocal的初步认识</li><li>深入源码解析ThreadLocal</li><li>ThreadLocal的具体使用场景</li><li>总结</li></ol><hr><p>ThreadLocal,顾名思义是线程本地变量，刚开始使用时总会不理解这个local的含义所在，所以我们先看一个例子，在没有使用ThreadLocal的时候是怎样的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ThreadLocal&quot;&gt;&lt;a href=&quot;#ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal&quot;&gt;&lt;/a&gt;ThreadLocal&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;ThreadLocal的初步认识&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="thread" scheme="https://supertheme.github.io/tags/thread/"/>
    
  </entry>
  
</feed>
