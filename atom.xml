<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>supertheme</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://supertheme.github.io/"/>
  <updated>2020-04-18T09:37:58.904Z</updated>
  <id>https://supertheme.github.io/</id>
  
  <author>
    <name>supertheme</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql索引</title>
    <link href="https://supertheme.github.io/mysql%E7%B4%A2%E5%BC%95/"/>
    <id>https://supertheme.github.io/mysql%E7%B4%A2%E5%BC%95/</id>
    <published>2020-04-18T09:37:58.000Z</published>
    <updated>2020-04-18T09:37:58.904Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mysql锁</title>
    <link href="https://supertheme.github.io/mysql%E9%94%81/"/>
    <id>https://supertheme.github.io/mysql%E9%94%81/</id>
    <published>2020-04-17T14:13:06.000Z</published>
    <updated>2020-04-18T07:52:06.722Z</updated>
    
    <content type="html"><![CDATA[<p>InnoDB</p><ol><li>共享锁</li><li>排他锁</li></ol><p>MyISAM</p><ol><li>共享锁</li><li>独占锁</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;InnoDB&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;共享锁&lt;/li&gt;
&lt;li&gt;排他锁&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MyISAM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;共享锁&lt;/li&gt;
&lt;li&gt;独占锁&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://supertheme.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql事务</title>
    <link href="https://supertheme.github.io/mysql%E4%BA%8B%E5%8A%A1/"/>
    <id>https://supertheme.github.io/mysql%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-04-17T14:12:23.000Z</published>
    <updated>2020-04-18T09:28:52.025Z</updated>
    
    <content type="html"><![CDATA[<ol><li>客户端</li><li><p>服务端</p><p> 2.1 连接器</p><p> 2.2 分析器</p><p> 2.3 优化器</p><p> 2.4 执行器</p></li><li><p>存储引擎</p><p> 3.1 InnoDB （支持事务）<br> 聚簇引擎（数据文件和索引文件在一起）<br> 3.2 MyISAM （不支持事务）<br> 非聚簇引擎 （数据文件和索引文件不在一起）</p></li></ol><h2 id="事务的特点"><a href="#事务的特点" class="headerlink" title="事务的特点"></a>事务的特点</h2><pre><code>1. 原子性（底层实现：Undo log）2. 一致性  3. 隔离性（底层实现：锁）4. 持久性（底层实现：Redo log）</code></pre><h2 id="原子性实现原理-Undo-log"><a href="#原子性实现原理-Undo-log" class="headerlink" title="原子性实现原理 Undo log"></a>原子性实现原理 Undo log</h2><pre><code>Undo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用Undo log来实现多版本并发控制（简称 MVCC）在操作任何数据之前，首先将数据备份至一个地方（这个存储数据备份的地方被称为Undo log）,然后进行数据的修改，如果出现了错误或者用户执行了Rollback，系统可以利用Undo log中的备份将数据恢复到事务开始之前的状态。简而言之，Undo log是逻辑日志(优先在内存中记录，当内存中不够时才会在磁盘中记录)，可以理解为：当delete一条记录，undo log会记录一条对应的Insert记录当insert一条记录，undo log会记录一条对应的delete记录当update一条记录，undo log会记录一条对应的相反update记录</code></pre><h2 id="持久性实现原理-Redo-log"><a href="#持久性实现原理-Redo-log" class="headerlink" title="持久性实现原理 Redo log"></a>持久性实现原理 Redo log</h2><pre><code>和Undo log相反，Redo log记录的是新数据的备份。在事务提交前，只要将Redo log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是Redo log已经持久化。系统可以根据Redo log的内容，将所有数据恢复至最新的状态。</code></pre><h2 id="隔离性实现原理-锁"><a href="#隔离性实现原理-锁" class="headerlink" title="隔离性实现原理 锁"></a>隔离性实现原理 锁</h2><pre><code>基于锁的并发控制流程可能出现的问题：死锁除了锁可以实现并发控制之外，还有的策略包含：1 基于时间戳2 基于快照隔离3 基于有效性检查</code></pre><p>###MySQL的隔离级别###</p><pre><code>事务具有隔离性，理论上事务之间的执行不会产生相互影响然而完全的隔离性会导致系统并发性能很低，降低对资源的利用率，因此实际上对隔离性的要求会有所放宽，这也会一定程度造成对数据库一致性的要求降低</code></pre><ol><li><strong>读未提交 read uncommited</strong><br> 脏读 不可重复读 幻读</li><li><strong>读已提交 read commited （oracle默认隔离级别）</strong><br> 不可重复读 幻读</li><li><strong>可重复读 repeatable read （Mysql默认隔离级别）</strong><br> 幻读</li><li><p><strong>串行化 serializable</strong></p></li><li><p>脏读<br> 两个事务，事务1更改数据但未提交，事务2读取到了该部分数据。即事务2读取到了事务1未提交的数据，此为脏读。</p></li><li>不可重复读<br> 两个事务，事务2先进行了一次读，然后事务1进行了更新操作且提交了事务，此时事物2再进行一次读，会发现两次读的结果是不一致的，此为不可重复读。</li><li>幻读<br> 两个事务，事务1进行了Insert或者delete操作，然后提交了，事务2在查询时是查不到事务1里修改的数据的，此为幻读<h2 id="一致性的实现原理-原子性-隔离性-一致性"><a href="#一致性的实现原理-原子性-隔离性-一致性" class="headerlink" title="一致性的实现原理 原子性+隔离性+一致性"></a>一致性的实现原理 原子性+隔离性+一致性</h2></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;客户端&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端&lt;/p&gt;
&lt;p&gt; 2.1 连接器&lt;/p&gt;
&lt;p&gt; 2.2 分析器&lt;/p&gt;
&lt;p&gt; 2.3 优化器&lt;/p&gt;
&lt;p&gt; 2.4 执行器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储引擎&lt;/p&gt;
&lt;p&gt; 3.1 InnoDB （支持事务）
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://supertheme.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://supertheme.github.io/redis/"/>
    <id>https://supertheme.github.io/redis/</id>
    <published>2020-04-14T13:27:44.000Z</published>
    <updated>2020-04-14T13:27:44.636Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RPC</title>
    <link href="https://supertheme.github.io/RPC/"/>
    <id>https://supertheme.github.io/RPC/</id>
    <published>2020-04-11T14:40:33.000Z</published>
    <updated>2020-04-11T14:40:33.660Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://supertheme.github.io/JVM/"/>
    <id>https://supertheme.github.io/JVM/</id>
    <published>2020-04-11T04:02:24.000Z</published>
    <updated>2020-04-11T04:02:24.977Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多线程之ThreadPool</title>
    <link href="https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BThreadPool/"/>
    <id>https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BThreadPool/</id>
    <published>2020-04-04T02:11:37.000Z</published>
    <updated>2020-04-04T02:11:37.096Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多线程之同步容器</title>
    <link href="https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/"/>
    <id>https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/</id>
    <published>2020-04-04T02:11:16.000Z</published>
    <updated>2020-04-04T02:11:16.068Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多线程之同步</title>
    <link href="https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%8C%E6%AD%A5/"/>
    <id>https://supertheme.github.io/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%90%8C%E6%AD%A5/</id>
    <published>2020-04-04T02:10:52.000Z</published>
    <updated>2020-04-12T08:11:27.334Z</updated>
    
    <content type="html"><![CDATA[<p>#线程#</p><p>##线程的生命周期状态##<br><img src="../images/thread_state.png" alt="Thread State"></p><p>##创建线程的方法##</p><ol><li>继承Thread类并重写run方法</li><li>实现Runnable接口</li><li>实现Callable接口(带返回值的线程)<br>##线程常用方法##</li><li>run</li><li>start</li><li>join</li><li>yield</li><li>sleep</li><li>stop（Deprecated）</li><li>suspend（Deprecated）</li><li>resume（Deprecated）<br>##多线程的优势和风险##<br><strong>优势</strong></li></ol><ul><li>提高系统吞吐率</li><li>提高响应性</li><li>充分利用多核</li></ul><p><strong>风险</strong></p><ul><li>线程安全</li><li>上下文切换</li><li>可靠性</li></ul><p>##线程安全问题##</p><ol><li><p>原子性</p><p> 解决方案： 1 锁 （synchronized lock）</p><pre><code>2 CAS</code></pre></li><li><p>可见性</p></li></ol><pre><code>解决方案： Volitile</code></pre><ol start="3"><li><p>有序性</p><p> 解决方案： Volitile(禁止指令重排)</p></li></ol><p>#线程同步#<br>  Java中的锁可分为两类:一类是内部锁，由Java提供的关键字synchronized实现，另一类是JUC包中的Lock接口，可提供各种灵活的锁操作。Java中的锁都是互斥的。</p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><p>  在早期的Java对于Synchronized的实现中，需要涉及到用户态到内核态的切换，因此该锁又被称为重量级锁，随着JDK的不断优化，synchronized也不断升级。一般来说，<strong>锁的升级</strong>过程可大致如下:<br>  <img src="../images/lock_level_up.png" alt="Lock 升级"><br>  作为锁的句柄变量通常使用<strong>private final</strong>关键词修饰，因为synchronized上锁的本质上是在对象(堆内存)上锁，所以如果修改了句柄指向的对象，那么实际上是两把锁，所以一般用private final关键词修饰。<strong>锁信息维护在对象的markword上</strong></p><p>  使用Synchronized可以<strong>同步方法</strong>，也可以<strong>同步代码块</strong>，两者锁住的都是当前对象，一般来说，推荐使用锁住同步代码块的方式，因为锁住的部分代码越少，整体的运行效率就会更高。除此之外，Synchronized也可以锁住Class对象，那么上锁的将不是实例对象，而是class对象。</p><p>  <strong>synchronized本身是可重入的锁</strong>。如何理解这句话呢？因为synchronized的实现是在上锁对象头的markword上维护锁信息，每上锁一次，锁信息的计数器就加一，已经获得锁的线程无需等待，即可重新获取已经持有的锁。<br>  Q1：线程T1正在执行同步方法，其他线程能执行非同步方法吗？<br>  Answer: 可以，非同步方法不依赖锁信息<br>  Q2：线程T1正在执行同步方法m1，那么其能够在m1里面调用执行该对象的其他同步方法m2吗？<br>  Answer: 可以，锁是可重入的</p><p>  子类的synchronized方法可以调用父类的synchronized方法</p><p>  <strong>程序在执行过程中，如果出现异常，默认情况会释放锁</strong>，所以在并发处理的过程中，遇见异常要格外注意。<br>  <strong>若出现异常不希望释放锁，请加上try catch</strong></p><h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>  ###ReentantLock###</p><p>  ###ReentrantReadWriteLock###</p><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#线程#&lt;/p&gt;
&lt;p&gt;##线程的生命周期状态##&lt;br&gt;&lt;img src=&quot;../images/thread_state.png&quot; alt=&quot;Thread State&quot;&gt;&lt;/p&gt;
&lt;p&gt;##创建线程的方法##&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承Thread类并重写run方法&lt;
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://supertheme.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程协作</title>
    <link href="https://supertheme.github.io/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/"/>
    <id>https://supertheme.github.io/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/</id>
    <published>2020-03-28T14:07:16.000Z</published>
    <updated>2020-03-28T14:07:16.767Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java中的各种锁</title>
    <link href="https://supertheme.github.io/Java%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81/"/>
    <id>https://supertheme.github.io/Java%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81/</id>
    <published>2020-03-28T14:06:18.000Z</published>
    <updated>2020-03-28T14:06:18.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="https://supertheme.github.io/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <id>https://supertheme.github.io/JavaScript%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-21T11:30:19.000Z</published>
    <updated>2020-03-24T14:18:30.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>JavaScript 由<strong>ECMAScript 、BOM、  DOM</strong>三部分组成</li><li>由ECMAScript 数据类型有两种:基本数据类型<strong>Undefined Null Boolean String Number</strong> 以及复杂数据类型<strong>Object</strong></li><li>ECMAScript中没有函数签名概念，因此<strong>没有重载</strong></li><li>ECMAScript中的函数参数实际上都会存放在arguments数组中<h2 id="变量作用域和内存"><a href="#变量作用域和内存" class="headerlink" title="变量作用域和内存"></a>变量作用域和内存</h2></li></ul><ul><li>基本类型的值占有固定大小的内存，因此被保存在栈内存中。引用类型的值是对象，保存在堆内存中。</li><li>基本类型的复制实际上是将值进行了复制。而引用类型的复制实际上是对于引用(指针)进行了复制，在堆内存中的对象还是同一个。</li><li>EMACScript中的所有参数传递都是按照<strong>值传递</strong></li><li>可使用typeof检测类型，instanceof检测实例类型</li><li>EMACScript<strong>没有块级作用域</strong>，所有作用域由上之下形成作用域链，子作用域可以访问父作用域的，反之不能。根作用域在window对象上。</li><li>JavaScript常用的垃圾回收算法有两个:<strong>标记清除</strong>和<strong>引用计数</strong></li><li>显式的将不使用的变量置为null能帮助回收内存</li><li>避免<strong>循环引用</strong></li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>大致分为Object Array Date RegExp Function  </li><li>Object类型的创建可以使用new Object()方式，也可以使用{}的字面量方式，访问其属性可以使用.的方式，也可以使用[]的方式</li><li>Array类型的创建可以使用new Array()的方式，也可以使用[]的字面量方式。Array的大小不是固定的，其<strong>length属性也不是只读</strong>的</li><li>Array的栈方法： <strong>push pop</strong></li><li>Array的队列方法：<strong>shift unshift </strong></li><li>Array的重排序方法：<strong>reverse sort</strong></li><li>Array的操作方法： <strong>concat slice splice </strong></li><li>Array的位置方法： <strong>indexOf lastIndexOf</strong></li><li>Array的迭代方法： <strong>every filter forEach map some</strong></li><li>Array的归并方法： <strong>reduce reduceRight</strong></li><li>Function实际上也是一个对象，对应的函数名实际上指针，所以其没有重载的概念。注意<strong>函数声明</strong>和<strong>函数表达式</strong>的不同，虽然只是相差一个()，函数内部有两个属性，<strong>arguments</strong> 和 <strong>this</strong></li><li>ECMAScript提供了3种包装类型，例如我们使用string.substring的方法，实际上是对string这一基本类型进行了包装转换。但是其包装变量只会存在代码执行的瞬间，在substring调用结束后会立即销毁。我们一般不显式的创建包装类。</li><li>包装类Boolean常用方法：valueOf</li><li>包装类Number常用方法： toString toFixed toExponential toPrecision</li><li>包装类String常用方法： charAt charCodeAt concat slice substr substring indexOf lastIndexOf trim toLowerCase toLocaleLowerCase toUpperCase toLocaleUpperCase match search replace split localeCompare fromCharCode</li><li>ECMAScript还内置了两个兜底的对象，开发人员不用显式的实例化内置对象就可以使用。他们分时是 <strong>Global</strong> 和 <strong>Math</strong></li><li>Global对象有<strong>encodeURI encodeURLComponent decodeURI decodeURLComponent eval</strong> ,二者的区别在于encodeURI不会对本身属于URI的特殊字符进行编码(例如/,#,:等符号)，而encodeURLComponent会对所有传入的字符进行编码。一般来说，我们使用encodeURLComponent更多。</li><li>我们不能直接访问Global对象,但该角色在JavaScript中由window对象扮演</li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>创建对象的方式大致有三种：<strong>工厂模式 构造函数模式 原型模式</strong></li><li>工厂模式创建的对象无法识别对象的类型</li><li>构造函数模式的缺点在于每个方法和属性都要在每个实例上重新创建一遍，造成很多大的内存浪费</li><li>原型模式三叉戟: <strong>构造函数 原型对象 实例 </strong> ，构造函数的protoType指向原型，原型的constructor指向构造函数，实例的[[protoType]]（即<em>proto</em>）指向实例。通过引入原型对象这一概念，将构造函数与实例的关系切开，同时注意使用字面量重写原型会切断实例与原有原型的关系。</li><li>创建自定义类型的最常见方式就是组合使用构造函数模式与原型模式</li><li>ECMAScript对于继承的实现利用的是原型链的概念，即将原型也赋予一个<em>proto</em>属性，其指向其他原型对象，原型链的最顶端是Object的原型。</li></ul><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>-注意<strong>函数声明</strong>和<strong>函数表达式</strong>的区别<br>-匿名函数与闭包的区别。闭包是指有权访问另一个函数作用域中变量的函数。创建闭包的常见方式就是在一个函数内部创建另一个函数<br>-当函数返回了一个闭包后，这个函数的作用域将会一直在内存中存在直到闭包不存在位置<br>-闭包的作用域链包含着它自己的作用域，包含函数的作用域以及全局作用域<br>-<strong>(function(){})()</strong> 模范块级作用域，实际上是利用了匿名函数的作用域<br>-过度使用闭包会造成大量的内存占用</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul><li>BOM的核心对象<strong>Window</strong>,其充当了Global对象的角色，setTimeOut setInterval alert comfirm prompt均是其常见方法。每个Frame拥有自己的Window对象</li><li><strong>location</strong>对象</li><li><strong>navigator</strong>对象</li><li><strong>screen</strong>对象</li><li><strong>history</strong>对象</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>DOM由各种节点构成。</li><li>最基本的节点类型是Node,用于抽象的表示文档中一个独立的部分；所有其他类型都继承自Node</li><li>Document类型表示整个文档，是一组分层节点的根节点。在JavaScript中，document对象时Document的一个实例。</li><li>Element节点表示文档中所有的HTML或XML元素，可以用来操作这些元素的内容和特性</li><li>还有一些节点类型，分别表示文本内容 注释 文档类型 CDATA区域以及文档片段</li><li>DOM操作很直观，但是在处理script和style上仍然存在复杂性</li><li>DOM操作很消耗性能，尽量减少DOM操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaScript 由&lt;strong&gt;ECMAScript 、BOM、  DOM&lt;/strong&gt;三部分组成&lt;
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://supertheme.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>session cookie token</title>
    <link href="https://supertheme.github.io/session_cookie_token/"/>
    <id>https://supertheme.github.io/session_cookie_token/</id>
    <published>2020-03-07T07:55:17.000Z</published>
    <updated>2020-03-07T13:06:48.857Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="security" scheme="https://supertheme.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>从tcp到http再到https</title>
    <link href="https://supertheme.github.io/%E4%BB%8Etcp%E5%88%B0http%E5%86%8D%E5%88%B0https/"/>
    <id>https://supertheme.github.io/%E4%BB%8Etcp%E5%88%B0http%E5%86%8D%E5%88%B0https/</id>
    <published>2020-03-07T07:53:30.000Z</published>
    <updated>2020-03-07T13:08:54.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OSI七层模型以及TCP-IP模型"><a href="#OSI七层模型以及TCP-IP模型" class="headerlink" title="OSI七层模型以及TCP/IP模型"></a>OSI七层模型以及TCP/IP模型</h1><p><img src="../images/tcp.png" alt="OSI七层模型和TCP/IP四层模型"></p><h1 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ol><li>客户端： hi，服务端，我想跟你建立连接，你同意吗？</li><li>服务端： 好的，客户端，我同意与你建立连接。我也想和你建立连接，你同意吗？</li><li><p>客户端： 服务端，我同意与你建立连接。</p><p>在上述的第二步中 ，服务端做了两件事，第一件是回答客户端同意建立连接，第二件是发起与客户端连接的请求。<br>在完成第二步的操作后，为什么还需要第三步客户端再向服务端发起一次确认呢？如果客户端发起的第一步请求因为网络延时能异常情况而导致其阻塞了，待客户端已经通过再次发起的请求与服务端完成通信结束后，此时阻塞的请求终于达到服务端，若没有第三步的二次确认，那么服务端就会跟这个异常的请求建立连接，且该链接实质上不会发送任何后续请求，导致占据链接资源。<br>从上述三步的过程中，也可以简化如下：</p></li><li><p>客服端确认自己发送请求正常</p></li><li>服务端确认客户端发送请求正常，自己发送请求，接受请求正常</li><li>客户端确认服务端发送请求，接受请求正常</li></ol><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ol><li>客户端： hi，服务端，我想要和你断开连接，可以吗？</li><li>服务端： 好的，现在可以断开连接</li><li>服务端： 客户端，我想要和你断开连接，可以吗？</li><li>客户端：好的，我同意</li></ol><p>从上面的四步，我们可以发现为什么创建连接只需要三步，而断开连接却需要四步？在创建连接的时候，服务端接受客户端请求和自己发起请求是在一步操作完成的，而在断开连接的时候却是分开两步的，为什么要分开两步呢？因为当服务端收到客户端发起的断开请求后很可能不会直接关闭socket的，在此期间，服务端仍然可能向客户端发送数据，但是客户端却不能向服务端发送数据，因此，服务端会先回复一个响应，然后才能由服务端发起断开连接的请求。<br>此外，在上述四步完成后，仍然需要等待2MSL(（注：MSL叫做最长报文段寿命，RFC建议为两分钟，也就是说，要经过四分钟才能进入到CLOSED状态），这也是在客户端发送报文可能丢失的情况下的一个容错机制。</p><h1 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h1><p>上述简单介绍了TCP/IP四层模型以及TCP协议建立连接和断开连接的过程，现在我们简单介绍下HTTP协议。从上图中我们可以知道HTTP协议是应用层的一个协议，其工作在TCP之上，是互联网应用最广泛的一种协议。全称是超文本传输协议。HTTP协议有以下几个特点：</p><ol><li>基于请求/响应模型。请求和响应是成对出现的，先有请求后有响应</li><li>HTTP默认端口是80</li><li>无连接：每次连接只处理一个请求。服务端收到HTTP连接后，处理完响应，即断开一该HTTP连接</li><li>无状态：每次HTTP请求都是没有上下文的。即上一次HTTP请求的数据，在下一次HTTP请求中是无记忆的。</li></ol><p>http协议 目前有版本HTTP/1.0 HTTP/1.1<br>http协议由请求和响应两部分组成。其中<br>http请求包含：请求行 请求头 请求体<br>http响应包含：响应行 响应头 响应体</p><h1 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OSI七层模型以及TCP-IP模型&quot;&gt;&lt;a href=&quot;#OSI七层模型以及TCP-IP模型&quot; class=&quot;headerlink&quot; title=&quot;OSI七层模型以及TCP/IP模型&quot;&gt;&lt;/a&gt;OSI七层模型以及TCP/IP模型&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
      <category term="网络" scheme="https://supertheme.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络协议" scheme="https://supertheme.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://supertheme.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://supertheme.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-13T03:09:38.000Z</published>
    <updated>2020-02-14T14:48:49.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是代理模式"><a href="#什么是代理模式" class="headerlink" title="什么是代理模式"></a>什么是代理模式</h2><p>最近在学习spring cloud的一些基础，在看到Feign组件的时候对其实现产生了浓厚的兴趣，在度娘的帮助下，发现其主要使用了代理模式对RestTemplate做了封装，在此，简单回顾一下java中的代理模式。<br>代理模式，顾名思义，就是在调用类和被调用类出现了一个代理类，生活中这种例子有很多，比如买车，买房等等，我们都不是直接去车企，开发商那直接买的，而是通过经销商呀，买房中介呀等渠道，这些角色扮演的就是<br>代理的角色。我们通过这些代理，可以获得一些额外的服务。这就是代理的好处了。<br>在软件中代理一般分为静态代理和动态代理，其中动态代理又有JDK自带的动态代理和cglib代理两种方式。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>让我们还是用卖车的例子看看静态代理的实现过程<br>先定义一个接口，代表着有卖车的服务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line">    <span class="comment">//卖车</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来一个实现类，实际上这就是具体的车企了，毕竟只有它才有造车的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarSaleImpl</span> <span class="keyword">implements</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一辆车"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，接下来是具体的买车了，想像一下实际场景，我们都是在经销商或者4s店那里买车的，他们承担的就是代理的角色。<br>代理的不单单只是做了卖车这个主要功能，关键是它还可以提供一些额外的附件服务呀，比如说4s店还可以提供配件，保修等功能，当然，也可以卖保险呀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">CarSale</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarSale carSaleImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Benz</span><span class="params">(CarSale carSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carSaleImpl = carSale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖出一份保险"</span>);</span><br><span class="line">        <span class="keyword">this</span>.carSaleImpl.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述过程我们可以看到，代理的好处在于其在不修改目标类的基础之上，可以提供一些额外的附加功能，但是，静态代理的弊端也很显然易见，就是代理类需要与目标类实现相同的接口。<br>我们这里只是介绍了 一个代理商，实际上车企品牌五花八门的，如果他们都需要一个代理商，我们总不能在代码中写很多重复的代理类吧，这时候，动态代理就出现了。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理，与静态代理的最大区别就是其代理类是通过反射在程序运行时动态生成的。主要分为JDK动态代理和cglib动态代理两种实现。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>jdk动态代理的实现依赖于两个对象：Proxy 和 InvocationHandler<br>其中proxy的作用就是代理了目标对象，而invocationHandler的作用是实现了目标对象，具体实现过程为：<br>Proxy（jdk类库提供）根据目标对象的接口生成一个实现类，它就是动态代理类（该类型是 $Proxy+数字 ）。生成过程是：由于拿到了接口，便可以获知接口的所有信息（主要是方法的定义），也就能声明一个新的类型去实现该接口的所有方法，这些方法显然都是“虚”的，它调用另一个对象的方法。当然这个被调用的对象不能是目标对象，如果是目标对象，我们就没法增强了，等于饶了一圈又回来了。因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。最终生成的动态类实际上是继承自Proxy且实现了目标对象接口的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*被代理的目标对象*/</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取动态代理对象*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"卖了一份保险"</span>);</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarSale carSale = <span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> CarSaleImpl()).getProxy();</span><br><span class="line">        carSale.sell();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理<br>jdk创建对象的速度远大于cglib，这是由于cglib创建对象时需要操作字节码。cglib执行速度略大于jdk，所以比较适合单例模式。另外由于CGLIB的大部分类是直接对Java字节码进行操作，这样生成的类会在Java的永久堆中。如果动态代理操作过多，容易造成永久堆满，触发OutOfMemory异常。spring默认使用jdk动态代理，如果类没有接口，则使用cglib</p><h2 id="代理的应用场景"><a href="#代理的应用场景" class="headerlink" title="代理的应用场景"></a>代理的应用场景</h2><ol><li>AOP</li><li>事务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是代理模式&quot;&gt;&lt;a href=&quot;#什么是代理模式&quot; class=&quot;headerlink&quot; title=&quot;什么是代理模式&quot;&gt;&lt;/a&gt;什么是代理模式&lt;/h2&gt;&lt;p&gt;最近在学习spring cloud的一些基础，在看到Feign组件的时候对其实现产生了浓厚的兴趣，在
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://supertheme.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理" scheme="https://supertheme.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList</title>
    <link href="https://supertheme.github.io/Java_Collection_LinkedList/"/>
    <id>https://supertheme.github.io/Java_Collection_LinkedList/</id>
    <published>2020-01-10T13:00:01.148Z</published>
    <updated>2020-02-14T14:46:19.317Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>LinkedList简介</li><li>LinkedList源码分析</li><li>LinekdList常见操作总结</li></ul></blockquote><h2 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h2><hr><ol><li>LinkedList作为List的一个实现，与ArrayList采用数组作为数据存储不一样的是，其采用了链表Node作为底层的数据存储</li><li>LinkedList不单单实现了List接口，而且也实现了Deque接口，所以可以把其当做一个双向队列使用</li><li>LinkedList允许存放Null值</li><li>LinkedList由于采用了链表作为数据存储,所以最显著的特性在于插入快，但查询慢，这一点恰恰与ArrayList相反</li></ol><h2 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a>LinkedList源码分析</h2><hr><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>LinkedList内部持有Node来作为存储容器，我们可以看到Node的源码本身就是个双向链表的实现，在每个Node中，存放了当前节点的值，以及前一个节点prev以及后一个节点next<br><img src="../images/linkedlist_3.png" alt="LinkedList中的Node"><br>在LinkedList内部的成员变量中，则只存放了first node 和 last node<br><img src="../images/linkedlist_1.png" alt="LinkedList成员变量"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>LinkedList为我们提供了2种构造方法，分别是：</p><ol><li>无参构造方法</li><li>使用特定集合的构造方法</li></ol><p>第一种为LinkedList初始化，其中不含任何node，第二种直接使用Collection中的元素填充到LinkedList<br><img src="../images/linkedlist_2.png" alt="LinkedList构造方法"></p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>LinkedList由于实现了Deque操作，因此其含有众多的队列操作方法，在此我们简单的看一下其add remove方法是如何实现的。<br>add方法:<br><img src="../images/linkedlist_4.png" alt="linkedlist add"><br>remove方法:<br>remove方法只会移除第一个相等的元素哟！<br><img src="../images/linkedlist_5.png" alt="linkedlist remove"></p><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><p>linkedlist提供了基础的队列操作，总结如下:</p><p></p><p><br>    <div style="width:100%;border:none;text-align:center"><br>        <iframe allowtransparency="yes" frameborder="0" style="width:100%;height:100%" src="../attachments/linkedlist.table1.html"><br>    </iframe></div><br></p><p></p><p></p><p><br>    <div style="width:100%;border:none;text-align:center"><br>        <iframe allowtransparency="yes" frameborder="0" style="width:100%;height:100%" src="../attachments/linkedlist.table2.html"><br>    </iframe></div><br></p><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>LinkedList的底层实现是链表</li><li>LinkedList是非线程安全的</li><li>LinkedList遵循 fail-fast 机制，在执行add remove 等结构性修改的操作时，会抛出异常，若要在遍历过程中添加或修改元素，可以使用迭代器</li><li>LinkedList实现了Deque接口，所以我们可以把其当做一个双向队列的数据接口来使用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList简介&lt;/li&gt;
&lt;li&gt;LinkedList源码分析&lt;/li&gt;
&lt;li&gt;LinekdList常见操作总结&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;LinkedList简介&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="collection" scheme="https://supertheme.github.io/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>var 的奇怪作用域</title>
    <link href="https://supertheme.github.io/%E6%96%B0%E6%96%87%E6%A1%A3/"/>
    <id>https://supertheme.github.io/%E6%96%B0%E6%96%87%E6%A1%A3/</id>
    <published>2019-03-11T14:42:08.843Z</published>
    <updated>2020-02-14T14:49:29.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="var-的奇怪作用域"><a href="#var-的奇怪作用域" class="headerlink" title="var 的奇怪作用域"></a>var 的奇怪作用域</h3><p>function f(shouldInitialize: boolean) {<br>if (shouldInitialize) {<br>var x = 10;<br>}</p><p>return x;<br>}</p><p>f(true);  // returns ‘10’<br>f(false); // returns ‘undefined’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;var-的奇怪作用域&quot;&gt;&lt;a href=&quot;#var-的奇怪作用域&quot; class=&quot;headerlink&quot; title=&quot;var 的奇怪作用域&quot;&gt;&lt;/a&gt;var 的奇怪作用域&lt;/h3&gt;&lt;p&gt;function f(shouldInitialize: boolean) 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://supertheme.github.io/categories/javascript/"/>
    
    
      <category term="前端" scheme="https://supertheme.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Springboot</title>
    <link href="https://supertheme.github.io/springboot/"/>
    <id>https://supertheme.github.io/springboot/</id>
    <published>2018-12-30T11:44:05.571Z</published>
    <updated>2020-02-14T14:48:01.127Z</updated>
    
    <content type="html"><![CDATA[<p>##springboot的目标</p><ol><li>为所有Spring开发者提供一个更快且更广泛的入门体验</li><li>开箱即用且能快速应对需求的变化(开闭原则)</li><li>提供一系列与原先大型项目等价的基础服务(嵌入式中间件,security health check)</li><li>消除XML配置<br>##环境搭建</li></ol><ul><li>Springboot 2.1.1.RELEASE</li><li>JAVA 8</li><li>Spring Framework 5.1.3.RELEASE</li><li>Maven 3.3+</li><li>Tomcat 9.0</li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ol><li>因为spring默认el表达式的占位符是${..}风格的，所有如果要使用Maven filtering,请使用@..@的格式，或者在maven propert中重新定义resource.delimiter</li></ol><h3 id="Externalized-Configuration"><a href="#Externalized-Configuration" class="headerlink" title="Externalized Configuration"></a>Externalized Configuration</h3><ul><li>配置随机值</li></ul><ol><li><strong>RandomValuePropertySource</strong> 可以使用${random.value}等表达式配置随机值</li></ol><ul><li>获取命令行参数值</li></ul><ol><li>SpringApplication将命令行参数(以–开头)转化为Property，并且可以通过<strong>Environment</strong>访问到,如果不希望Environment访问到，可以配置如下：SpringApplication.setAddCommandLineProperties(false)</li></ol><ul><li>配置文件</li></ul><p>1. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##springboot的目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为所有Spring开发者提供一个更快且更广泛的入门体验&lt;/li&gt;
&lt;li&gt;开箱即用且能快速应对需求的变化(开闭原则)&lt;/li&gt;
&lt;li&gt;提供一系列与原先大型项目等价的基础服务(嵌入式中间件,security heal
      
    
    </summary>
    
    
      <category term="spring" scheme="https://supertheme.github.io/categories/spring/"/>
    
    
      <category term="springboot" scheme="https://supertheme.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList</title>
    <link href="https://supertheme.github.io/Java_Collection_ArrayList/"/>
    <id>https://supertheme.github.io/Java_Collection_ArrayList/</id>
    <published>2018-12-16T10:41:27.250Z</published>
    <updated>2020-02-14T14:45:58.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>ArrayList简介</li><li>ArrayList源码分析</li><li>ArrayList扩容机制</li></ul></blockquote><h2 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h2><hr><ol><li>ArrayList可以理解成一个”动态数组”，由于Java中数组都是固定大小的，但ArrayList是一个可以动态的添加和删除元素的List,其底层仍然是由数组实现的。ArrayList继承自AbstractList，并且实现了List,RandomAccess,Cloneable,Serializable这四个接口。</li><li>ArrayList与Vector有很大的相似性，最大的区别在于ArrayList是线程不安全的，而Vector是线程安全的，若要使用线程安全的，请使用<code>List list = Collections.synchronizedList(new ArrayList(...));</code></li><li>ArrayList与LinkedList同样也有很大的相似性，二者作为List的主要两个实现类，主要区别在于ArrayList的add/remove操作慢，而get操作快，而LinkedList则恰好相反，究其原因还是在于底层实现一个是数组，一个是链表<h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2></li></ol><hr><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>ArrayList内部持有Object[]来作为存储容器，其默认的CAPACITY大小为10，最大的容量为Integer.MAX_VALUE<br><img src="../images/arraylist_1.png" alt="ArrayList的成员变量"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>ArrayList为我们提供了3种构造方法，分别是：</p><ol><li>指定初始容量的构造方法</li><li>无参构造方法</li><li>使用特定集合的构造方法</li></ol><p>第一种为elementData初始化成对应的指定容量大小，第二种直接构造一个空的elementData，第三种则是通过<code>Arrays.copyof</code>来初始话elementData并赋值<br><img src="../images/arraylist_2.png" alt="ArrayList构造方法"></p><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>由于ArrayList本身的底层实现是数组，所以对于其操作的add remove get  set 等方法全部都是基于数据元素的操作，从源码截取了几个方法，本身逻辑均不复杂<br><img src="../images/arraylist_3.png" alt="ArrayList中的add、set"></p><p>remove方法:<br><img src="../images/arraylist_4.png" alt="ArrayList中的remove"></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>ArrayList还内置了三个内部类来帮助我们完成一些其他的操作，其中包含实现了Iterator接口的Itr，实现了ListIterator接口的ListItr，还有一个SubList</p><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p>由于Itr和ListItr只是实现的接口略有差异，在此截取了Itr执行remove的代码片段，我们可以看到，在Itr内部中含有一个新的expectedModCount变量，其初始值为modCount，<br>在执行remove操作的时候，会先进行判断expectedModCount与modCount是否相等，若相等，则执行remove操作，若不相等，则会抛出ConcurrentModificationException异常，相信小伙伴们对这个异常并不陌生，<br>平时在代码中对List写foreach循环的时候，若执行了remove操作，则就会遇见该异常了，而如果使用Iterator去执行remove操作，就可以正常删除了。原因就在于此哈。<br><img src="../images/arraylist_5.png" alt="ArrayList中的Iterator"></p><h4 id="SubList"><a href="#SubList" class="headerlink" title="SubList"></a>SubList</h4><p>ArrayList提供了SubList的内部类，其主要作用是提供对于List子集合的一个视图，我们需要注意的是，这仅仅是一个视图（与数据库里的概念类似）,任何对原List的操作均会体现在SubList上，而任何在SubList上的操作也会同样<br>的反应到List上，因为其本质上都是对同一个elementData做操作，因此，我们在进行add、remove等structurally modified的操作时，一定要特别注意subList也会进行相应的变化<br><img src="../images/arraylist_6.png" alt="ArrayList中的SubList"></p><h2 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h2><hr><p>为了充分的利用内存空间，代码规范也会让我们在初始化ArrayList就为其指定capacity，因此，我们有必要也了解一下ArrayList中的扩容机制，在执行add，addAll等操作时，会进行capacity的check，与当前elementData的size进行对比，<br>若需要扩容，则会<code>newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>，新容量将会是旧容量的1.5倍<br><img src="../images/arraylist_7.png" alt="ArrayList中的扩容"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><ol><li>ArrayList的底层实现是数组</li><li>ArrayList是非线程安全的</li><li>ArrayList最好在初始化时就为其指定容量大小，每次在做add操作时，会触发容量检查，若当前数组小于元素个数时，会新申请1.5倍的数组空间，将原有数组复制</li><li>ArrayList遵循 fail-fast 机制，在执行add remove 等结构性修改的操作时，会抛出异常，若要在遍历过程中添加或修改元素，可以使用迭代器</li><li>ArrayList提供的subList方法实际上是返回的是其一个内部类，底层仍然指向同一片数组空间，只是作为视图使用，无论对List本身操作或者对SubList操作，二者相互之间均彼此影响</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList简介&lt;/li&gt;
&lt;li&gt;ArrayList源码分析&lt;/li&gt;
&lt;li&gt;ArrayList扩容机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ArrayList简介&quot;&gt;&lt;a href=&quot;#Arra
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="collection" scheme="https://supertheme.github.io/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="https://supertheme.github.io/Java_ThreadLocal/"/>
    <id>https://supertheme.github.io/Java_ThreadLocal/</id>
    <published>2018-12-01T13:01:18.695Z</published>
    <updated>2020-02-14T14:47:33.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><hr><ol><li>ThreadLocal的初步认识</li><li>深入源码解析ThreadLocal</li><li>ThreadLocal的具体使用场景</li><li>总结</li></ol><hr><p>ThreadLocal,顾名思义是线程本地变量，刚开始使用时总会不理解这个local的含义所在，所以我们先看一个例子，在没有使用ThreadLocal的时候是怎样的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ThreadLocal&quot;&gt;&lt;a href=&quot;#ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal&quot;&gt;&lt;/a&gt;ThreadLocal&lt;/h1&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;ThreadLocal的初步认识&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://supertheme.github.io/categories/java/"/>
    
    
      <category term="thread" scheme="https://supertheme.github.io/tags/thread/"/>
    
  </entry>
  
</feed>
